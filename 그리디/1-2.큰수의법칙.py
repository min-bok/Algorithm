# 1-2. 큰 수의 법칙
# 다양한 수로 이루어진 배열이 있을때 주어진 수들을 M번 더하여 가장 큰 수를 만드는 법칙이다.
# 단, 배열의 특정한 인덱스(번호)에 해당하는 수가 연속해서 K번을 초과해서 더해질 수 없는 것이 이 법칙의 특징이다. 
# 단, 서로 다른 인덱스에 해당하는 수가 같은 경우에도 서로 다른 것으로 간주한다.
# 배열의 크기 N, 숫자가 더해지는 횟수 M, 그리고 K가 주어질 때 큰 수의 법칙에 따른 결과를 출력하시오.

# 입력예시
# 첫째 줄에 N, M, K의 자연수가 주어지며, 각 자연수는 공백으로 구분한다.
# 둘째 줄에 N개의 자연수가 주어진다. 각 자연수는 공백으로 구분한다. 단, 각각의 자연수는 1 이상 10,000 이하의 수로 주어진다.

# input = "5 7 2"
# data = [3, 4, 3, 4, 3] 
# 답 28

# 문제 풀이 아이디어
# 가장 큰 수와 그 다음 큰 수를 찾는다.
# 만약 가장 큰 수 == 그 다음 큰 수이면, 가장 큰 수 * M을 반환한다
# 만약 가장 큰수 != 그 다음 큰 수 이면, 가장 큰 수 K번 더한 후 그 다음 수를 한 번 더해주고, 가장 큰 수를 더하기를 반복한다.

# 문제 풀이 1
# 6번을 초과할 수 없으며, 총 8번 더한다.
input = "5 8 3"
data = [2, 4, 5, 4, 6]

n, m, k = map(int, input.split())
data.sort(reverse=True)

result = 0

first_num = (data[0])
second_num = data[1]

while True:
    for i in range(k):
        if m == 0:
            break
        result += first_num
        m -= 1
    if m == 0:
        break
    result += second_num
    m -= 1

print(result) # 46

# 문제풀이 2
# 이 문제는 M이 10,000 이하이므로 1번의 방식으로도 문제를 해결할 수 있지만, M의 크기가 100억 이상처럼 커진다면 시간 초과 판정을 받을 것이다.
# 간단한 수학적 아이디어를 이용해 더 효율적으로 문제를 해결해보자

